# -*- coding: utf-8 -*-
"""Baishnovi Dash,024

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1zIq1LU-5Q4dxKcE74xC3fBikaq2d2ppP
"""

import numpy as np # linear algebra
import pandas as pd # data processing, CSV file I/O (e.g. pd.read_csv)
import nltk

import pandas
df_sms = pd.read_csv('/content/drive/MyDrive/spam.csv',encoding='latin-1')
df_sms.head()

from google.colab import drive
drive.mount('/content/drive')

df_sms = df_sms.drop(["Unnamed: 2", "Unnamed: 3", "Unnamed: 4"], axis=1)
df_sms = df_sms.rename(columns={"v1":"label", "v2":"sms"})
df_sms.head()

print(len(df_sms))

df_sms.label.value_counts()

df_sms.describe()

df_sms['length'] = df_sms['sms'].apply(len)
df_sms.head()

# Commented out IPython magic to ensure Python compatibility.
import matplotlib.pyplot as plt
import seaborn as sns
# %matplotlib inline
df_sms['length'].plot(bins=50, kind='hist')

df_sms.hist(column='length', by='label', bins=50,figsize=(10,4))

df_sms.loc[:,'label'] = df_sms.label.map({'ham':0, 'spam':1})
print(df_sms.shape)
df_sms.head()

df_sms = df_sms[["label", "sms"]]
x = np.array(df_sms["sms"])
y = np.array(df_sms["label"])

from sklearn.feature_extraction.text import CountVectorizer
count_vector = CountVectorizer()

from sklearn.model_selection import train_test_split

X_train, X_test, y_train, y_test = train_test_split(df_sms['sms'],
                                                    df_sms['label'],test_size=0.20,
                                                    random_state=42)

count_vector = CountVectorizer()
training_data = count_vector.fit_transform(X_train)
testing_data = count_vector.transform(X_test)
print(training_data)
print('~~~~~~~~~~~~~~')
print(testing_data)

from sklearn.naive_bayes import MultinomialNB
naive_bayes = MultinomialNB()
naive_bayes.fit(training_data,y_train)

sample = input('Enter a message:')
df_sms = count_vector.transform([sample]).toarray()
predictions = naive_bayes.predict(df_sms)
print(predictions)

sample = input('Enter a message: ')
df_sms = count_vector.transform([sample]).toarray()
predictions = naive_bayes.predict(df_sms)
print(predictions)

pred = naive_bayes.predict(testing_data)

from sklearn.metrics import accuracy_score, precision_score, recall_score, f1_score
print('Accuracy score: {}'.format(accuracy_score(y_test, pred)))
print('Precision score: {}'.format(precision_score(y_test, pred)))
print('Recall score: {}'.format(recall_score(y_test, pred)))
print('F1 score: {}'.format(f1_score(y_test, pred)))

